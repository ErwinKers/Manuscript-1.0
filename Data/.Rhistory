plot(FA.cca1,scaling=3)
anova(FA.cca1, by = "margin") #or by terms, margin, axis
library(tidyverse)
library(readxl)
library(easyCODA)
FA.dat <- read_excel("C:/Users/Erwin/OneDrive/Manuscript Erwin Kers/R script + data/Manuscript-1.0/Data/FA data.xlsx", skip=1)
# Selection of data
# selecting only % for the 3 species
CA.1 <- filter(FA.dat, Type=="%", Species == "POM" & Depth == "0-10" ) %>%
filter(Date != as.Date("2020-10-27")) %>%
filter(Date != as.Date("2021-06-30"))
# Selecting only FA to keep in analysis + species,date, vial to make column
CA.1 <- CA.1[c(1,3,5,12:57)]
################### fixing dates
dates <- CA.1$Date
table(dates)
dates.num <- as.numeric(as.factor(dates))
table(dates.num)
dates.lev <- factor(as.factor(dates), levels=c("2020-11-24", "2021-01-15", "2021-02-05","2021-03-18", "2021-04-19", "2021-05-04", "2021-05-19", "2021-06-08" ))
table(dates.lev)
dates.num <- as.numeric(dates.lev)
table(dates.num)
####################
#make a value for numbers of vial (removing "EK")
num.1 <- str_sub(CA.1$Vial, 3, str_length(CA.1$Vial)-0)
species <- (CA.1$Species)
#  make species as numbers instead of characters
species.num <- as.numeric(as.factor(CA.1$Species))
# add first letter of Species with number of vial together
case.label <- paste(substr(CA.1$Species,1,1), num.1, sep="")
#make rownames the vial column
CA.1 <-CA.1 %>% remove_rownames %>% column_to_rownames(var="Vial")
# set case.label value as rownames
rownames(CA.1) <- case.label
#remove species & date column + FA with many 0's (9,10D16 and C20:1n-9, which have too many zeros, also C19:0internalstandard)
ER <- CA.1[,-c(1,2,15, 23, 29)]
############################################# FANCY
### remove outlier C57 and re-analyse (not aplicable in eudiaptomus)
FA2E    <- ER
FA2E.ca <- CA(FA2E)
#PLOT.CA(FA2E.ca, map="contribution", axes.inv=c(1,-1), rescale=0.5)
################################################################################
### remove outlier C57 and re-analyse
FA2 <- ER
FA2.ca <- CA(FA2)
#PLOT.CA(FA2.ca, map="contribution", axes.inv=c(1,-1), rescale=1.666666)
### better graphics
round(100*FA2.ca$sv^2/sum(FA2.ca$sv^2),2)
FA2.ca.rpc <- FA2.ca$rowpcoord
cm <- colSums(FA2)/sum(FA2)
FA2.ca.ccc <- FA2.ca$colcoord * sqrt(cm)
# invert 1st axis
FA2.ca.rpc[,1] <- -FA2.ca.rpc[,1]
FA2.ca.ccc[,1] <- -FA2.ca.ccc[,1]
FA2.ca.ctr <- (FA2.ca.ccc[,1]^2 > 1/ncol(FA2)) | (FA2.ca.ccc[,2]^2 > 1/ncol(FA2))
names(FA2.ca.ctr) <- colnames(FA2)
sum(FA2.ca.ctr)
# force 20:5n-3 into the plot
FA2.ca.ctr["C20:5n-3"] <- TRUE
### function add.alpha:
add.alpha <- function(col, alpha=1){
if(missing(col))
stop("Please provide a vector of colours.")
apply(sapply(col, col2rgb)/255, 2,
function(x)
rgb(x[1], x[2], x[3], alpha=alpha))
}
###
require(RColorBrewer)
species.col <- brewer.pal(3, "Dark2") # c("forestgreen","chocolate","purple) # green for "C", brown for "E"
species.col.alpha <- add.alpha(species.col, 0.8)
require(colorspace)
date.col <- rainbow_hcl(9)
require(RColorBrewer)
date.col <- c(brewer.pal(8, "Dark2"),brewer.pal(8,"Dark2")[1])
species.col.alpha <- add.alpha(species.col, 0.8)
# save as png insert into PPT, and eventually save all as png
#png(file="Fig_S6_left.png",width=7,height=5.5,units="in",res=144)
rescale <- 0.5 # for points
dim <- c(1,2)
col <- c("blue","red")
perc.hor <- 42.06; perc.ver <- 21.54
par(mar=c(4.2,4,2,2.5), mgp=c(2,0.7,0), font.lab=2, cex.axis=0.8)
plot(1.05 * rbind(FA2.ca.rpc, rescale*FA2.ca.ccc), type = "n",
asp = 1, xlab = paste("CA dimension ", dim[1], " (",
round(perc.hor, 1), "%)", sep = ""), ylab = paste("CA dimension ",
dim[2], " (", round(perc.ver, 1), "%)", sep = ""),
xaxt = "n", yaxt = "n", main = "")
abline(h = 0, v = 0, col = "gray", lty = 2)
axis(1)
axis(2)
axis(3, at = axTicks(3), labels = round(axTicks(3)/rescale,
2), col = "black", col.ticks = col[2], col.axis = col[2])
axis(4, at = axTicks(4), labels = round(axTicks(4)/rescale,
2), col = "black", col.ticks = col[2], col.axis = col[2])
arrows(0, 0, 0.92 * rescale * FA2.ca.ccc[FA2.ca.ctr, 1], 0.92 * rescale * FA2.ca.ccc[FA2.ca.ctr, 2],
length = 0.1, angle = 10, col = "pink")
text(FA2.ca.rpc,  labels=paste(substr(species,1,1),dates.num, sep=""),
col = date.col[dates.num],cex = 0.6, font=2)
text(rescale * FA2.ca.ccc[FA2.ca.ctr,], labels = colnames(FA2)[FA2.ca.ctr], col = "red", cex = 0.7, font = 4)
legend("topleft", legend=c("1 = 24/11/2020","2 = 15/01/2021","3 = 05/02/2021",
"4 = 18/03/2021","5 = 19/04/2021","6 = 04/05/2021","7 = 19/05/2021","8 = 08/06/2021"),
col=date.col, text.col=date.col, cex=0.8, text.font=2, title="P: POM", title.col="black")
########################################### CCA
FA.cca1<-cca(FA2~dates)		# add species and dates as explanatory variables
plot(FA.cca1,scaling=3)
anova(FA.cca1, by = "margin") #or by terms, margin, axis
library(tidyverse)
library(readxl)
library(easyCODA)
FA.dat <- read_excel("C:/Users/Erwin/OneDrive/Manuscript Erwin Kers/R script + data/Manuscript-1.0/Data/FA data.xlsx", skip=1)
# Selection of data
# selecting only % for the 3 species
CA.1 <- filter(FA.dat, Type=="%", Species == "Eudiaptomus" |Species == "Cyclops" ) %>%
filter(Date != as.Date("2020-10-27"))
# Selecting only FA to keep in analysis + species,date, vial to make column
CA.1 <- CA.1[c(1,3,5,12:57)]
################### fixing dates
dates <- CA.1$Date
table(dates)
dates.num <- as.numeric(as.factor(dates))
table(dates.num)
dates.lev <- factor(as.factor(dates), levels=c("2020-11-24", "2021-01-15", "2021-02-05","2021-03-18", "2021-04-19", "2021-05-04", "2021-05-19", "2021-06-08" ))
table(dates.lev)
dates.num <- as.numeric(dates.lev)
table(dates.num)
####################
#make a value for numbers of vial (removing "EK")
num.1 <- str_sub(CA.1$Vial, 3, str_length(CA.1$Vial)-0)
species <- (CA.1$Species)
#  make species as numbers instead of characters
species.num <- as.numeric(as.factor(CA.1$Species))
# add first letter of Species with number of vial together
case.label <- paste(substr(CA.1$Species,1,1), num.1, sep="")
#make rownames the vial column
CA.1 <-CA.1 %>% remove_rownames %>% column_to_rownames(var="Vial")
# set case.label value as rownames
rownames(CA.1) <- case.label
#remove species & date column + FA with many 0's (9,10D16 and C20:1n-9, whch have too many zeros, also C19:0internalstandard)
ER <- CA.1[,-c(1,2,15, 23, 29)]
############################################# FANCY
### remove outlier C57 and re-analyse (not aplicable in eudiaptomus)
FA2E    <- ER
FA2E.ca <- CA(FA2E)
#PLOT.CA(FA2E.ca, map="contribution", axes.inv=c(1,-1), rescale=0.5)
################################################################################
### remove outlier C57 and re-analyse
FA2 <- ER
FA2.ca <- CA(FA2)
PLOT.CA(FA2.ca, map="contribution", axes.inv=c(1,-1), rescale=1.666666)
### better graphics
round(100*FA2.ca$sv^2/sum(FA2.ca$sv^2),2)
FA2.ca.rpc <- FA2.ca$rowpcoord
cm <- colSums(FA2)/sum(FA2)
FA2.ca.ccc <- FA2.ca$colcoord * sqrt(cm)
# invert 1st axis
FA2.ca.rpc[,1] <- -FA2.ca.rpc[,1]
FA2.ca.ccc[,1] <- -FA2.ca.ccc[,1]
FA2.ca.ctr <- (FA2.ca.ccc[,1]^2 > 1/ncol(FA2)) | (FA2.ca.ccc[,2]^2 > 1/ncol(FA2))
names(FA2.ca.ctr) <- colnames(FA2)
sum(FA2.ca.ctr)
# force 20:5n-3 into the plot
FA2.ca.ctr["C20:5n-3"] <- TRUE
### function add.alpha:
add.alpha <- function(col, alpha=1){
if(missing(col))
stop("Please provide a vector of colours.")
apply(sapply(col, col2rgb)/255, 2,
function(x)
rgb(x[1], x[2], x[3], alpha=alpha))
}
###
require(RColorBrewer)
species.col <- brewer.pal(3, "Dark2") # c("forestgreen","chocolate","purple) # green for "C", brown for "E"
species.col.alpha <- add.alpha(species.col, 0.8)
require(colorspace)
date.col <- rainbow_hcl(9)
require(RColorBrewer)
date.col <- c(brewer.pal(8, "Dark2"),brewer.pal(8,"Dark2")[1])
species.col.alpha <- add.alpha(species.col, 0.8)
# save as png insert into PPT, and eventually save all as png
#png(file="Fig_S6_left.png",width=7,height=5.5,units="in",res=144)
rescale <- 0.5 # for points
dim <- c(1,2)
col <- c("blue","red")
perc.hor <- 65.63; perc.ver <- 17.40
par(mar=c(4.2,4,2,2.5), mgp=c(2,0.7,0), font.lab=2, cex.axis=0.8)
plot(1.05 * rbind(FA2.ca.rpc, rescale*FA2.ca.ccc), type = "n",
asp = 1, xlab = paste("CA dimension ", dim[1], " (",
round(perc.hor, 1), "%)", sep = ""), ylab = paste("CA dimension ",
dim[2], " (", round(perc.ver, 1), "%)", sep = ""),
xaxt = "n", yaxt = "n", main = "")
abline(h = 0, v = 0, col = "gray", lty = 2)
axis(1)
axis(2)
axis(3, at = axTicks(3), labels = round(axTicks(3)/rescale,
2), col = "black", col.ticks = col[2], col.axis = col[2])
axis(4, at = axTicks(4), labels = round(axTicks(4)/rescale,
2), col = "black", col.ticks = col[2], col.axis = col[2])
arrows(0, 0, 0.92 * rescale * FA2.ca.ccc[FA2.ca.ctr, 1], 0.92 * rescale * FA2.ca.ccc[FA2.ca.ctr, 2],
length = 0.1, angle = 10, col = "pink")
text(FA2.ca.rpc,  labels=paste(substr(species,1,1),dates.num, sep=""),
col = date.col[dates.num],cex = 0.6, font=2)
text(rescale * FA2.ca.ccc[FA2.ca.ctr,], labels = colnames(FA2)[FA2.ca.ctr], col = "red", cex = 0.7, font = 4)
legend("bottomleft", legend=c("1 = 24/11/2020","2 = 15/01/2021","3 = 05/02/2021",
"4 = 18/03/2021","5 = 19/04/2021","6 = 04/05/2021","7 = 19/05/2021","8 = 08/06/2021"),
col=date.col, text.col=date.col, cex=0.8, text.font=2, title="C:Cyclops E:Eudiaptomus", title.col="black")
################################################# CCA
FA.cca1<-cca(FA2~dates+species)		# add species and dates as explanatory variables
plot(FA.cca1,scaling=3)
anova(FA.cca1, by = "margin") #or by terms, margin, axis
#light data from handheld sensor (one with the cables)
library(readxl)
lighthand <- read_excel("C:/Users/Erwin/OneDrive/UIT/Data/light data handheld/handheld light sensors.xlsx")
lhand <- lighthand %>%
mutate(Date=as.Date(Date)) %>%
pivot_longer(., cols = "Light AIR":"Light water", names_to = "Type", values_to = "values")%>%
mutate(Type = fct_reorder(Type, values, .fun="median",na.rm = TRUE)) %>%
ggplot(., aes(x= Date, y=values, fill= Type)) +
geom_bar(position = "dodge",stat="identity")+
labs(title="light measurements", y = "um m2/s1")+
scale_x_date(breaks="month", labels = scales::label_date("%b"),limits = as.Date(c('2020-10-20','2021-06-15')))
#layout options
#theme_tufte()+
#scale_fill_brewer(palette="Accent")
lhand
library(dplyr)
library(readxl)
library(viridis)
library(RColorBrewer)
library(tidyverse)
library(cowplot)
FA_data <- read_excel("C:/Users/Erwin/OneDrive/Manuscript Erwin Kers/R script + data/Manuscript-1.0/Data/FA data.xlsx", skip=1)
#Subset 1 species
bar <- subset(FA_data, Type=="%" & Species=="Cyclops")
bar$Date <- as.Date(bar$Date)
#transform to long data frame
DFtall <- bar %>% pivot_longer(cols= (c(12,13,19,22,26,29,30,35,39,41,47,49,52,56,57)), names_to = "FA", values_to = "value")
# Stacked bar plot Cyclops seperated per individual sample
Bar1 <-ggplot(DFtall, aes(fill=FA, y=value, x= interaction(Vial,Date,sep = "&"))) +
geom_bar(position="stack", stat="identity")+
labs(title="Cyclops", y = "%")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Eudiaptomus --------------------------------------------
bar <- subset(FA_data, Type=="%" & Species=="Eudiaptomus")
bar$Date <- as.Date(bar$Date)
#transform to long data frame
DFtall <- bar %>% pivot_longer(cols= (c(12,13,19,22,26,29,30,35,39,41,47,52,57)), names_to = "FA", values_to = "value")
# Stacked bar plot Eudiaptomus seperated per individual sample
Bar2 <-ggplot(DFtall, aes(fill=FA, y=value, x= interaction(Vial,Date, sep = "&"))) +
geom_bar(position="stack", stat="identity")+
labs(title="Eudiaptomus", y = "%")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# POM --------------------------------------------
bar <- subset(FA_data, Type=="%" & Species=="POM")
bar$Date <- as.Date(bar$Date)
#transform to long data frame
DFtall <- bar %>% pivot_longer(cols= (c(12,13,19,22,26,29,30,35,39,41,47,52,57)), names_to = "FA", values_to = "value")
# Stacked POM
Bar3 <- ggplot(DFtall, aes(fill=FA, y=value, x=interaction(Vial,Date,Depth, sep = "&"))) +
geom_bar(stat="identity")+
labs(title="POM", y = "%")+
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
Bar1
Bar2
Bar3
plot_grid(FALIN,FALIN2,ncol=1,align = "v")
plot_grid(E,C,N,ncol=1,align = "v")
#pretty fa table
library(tidyverse)
library(gt)
library(readxl)
library(dplyr)
library(lubridate)
FA <- read_excel("C:/Users/Erwin/OneDrive/Manuscript Erwin Kers/R script + data/Manuscript-1.0/Data/FA data.xlsx", skip=1)
#str(FA$Date)
FA2 <- FA %>%
select(1,3,7,8,11:57) %>%
filter(Species!="Bulk tracers" , Species!="Blank", Type=="%") %>%
group_by(Date,Species)%>%
mutate(Date2 = as.Date(Date,format="%d-%m-%Y"))%>%
summarise_all(funs(sum(!is.na(.)),mean,sd),na.rm=TRUE)%>%
select(1,2,3,52:152)%>%
mutate(across(where(is.numeric), round, 2))%>%
rename(replicates = "Tot_lipids_sum")%>%
unite("Tot_lipids","Tot_lipids_mean" : "Tot_lipids_stdev_mean",sep= "±",na.rm = TRUE, remove = T)%>%
unite("C14:0",starts_with("C14:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("iso-15:0",starts_with("iso-15:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("anteiso-15:0",starts_with("anteiso-15:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C14:1n-5",starts_with("C14:1n-5"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C15:0",starts_with("C15:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("iso-16:0",starts_with("iso-16:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C15:1n-5",starts_with("C15:1n-5"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C16:0",starts_with("C16:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("iso-17:0",starts_with("iso-17:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C16:1n-9",starts_with("C16:1n-9"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C16:1n-7",starts_with("C16:1n-7"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C17:0",starts_with("C17:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("9,10D16",starts_with("9,10D16"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C17:1n-7",starts_with("C17:1n-7"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:0",starts_with("C18:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:1n-9trans",starts_with("C18:1n-9trans"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:1n-12",starts_with("C18:1n-12"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:1n-9cis",starts_with("C18:1n-9cis"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:1n-7",starts_with("C18:1n-7"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:1n-6",starts_with("C18:1n-6"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C19:0",starts_with("C19:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:2n-6trans",starts_with("C18:2n-6trans"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("9,10D18",starts_with("9,10D18"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:2n-6cis (LIN)",starts_with("C18:2n-6cis (LIN)"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C20:0",starts_with("C20:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:3n-6",starts_with("C18:3n-6"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C20:1n-9",starts_with("C20:1n-9"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:3n-3 (ALA)",starts_with("C18:3n-3 (ALA)"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C21:0",starts_with("C21:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:4n-3",starts_with("C18:4n-3"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C20:2n-6",starts_with("C20:2n-6"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C22:0",starts_with("C22:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C20:3n-6",starts_with("C20:3n-6"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C22:1n-9",starts_with("C22:1n-9"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C20:3n-3",starts_with("C20:3n-3"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C20:4n-6",starts_with("C20:4n-6"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C23:0",starts_with("C23:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C20:4n-3",starts_with("C20:4n-3"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C22:2n-6",starts_with("C22:2n-6"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C24:0",starts_with("C24:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C20:5n-3",starts_with("C20:5n-3"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C24:1n-9",starts_with("C24:1n-9"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C22:3n-3",starts_with("C22:3n-3"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C22:4n-6",starts_with("C22:4n-6"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C22:5n-3",starts_with("C22:5n-3"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C22:6n-3",starts_with("C22:6n-3"),sep= "±",na.rm = TRUE, remove = T)%>%
select(-Type_mean,-Type_sd,-Tot_lipids_sd,-Tot_lipids_stdev_sd)
# making the table
# Create a gt table
FA2 %>%
gt(rowname_col = "Species",
groupname_col = "Date") %>%
tab_header(
title = "Fatty acid contribution")%>%
cols_label( Species = md("**Species**")) %>%
cols_label( Date = md("**Date**")) %>%
cols_align(
align = "center",
columns = c("replicates":"C22:6n-3")
)%>%
cols_align(
align = "left",
columns = c(Species)
)%>%
cols_width(
everything() ~ px(100)
)
FA2
FA %>%
select(1,3,7,8,11:57) %>%
filter(Species!="Bulk tracers" , Species!="Blank", Type=="µg FAME/mg dw") %>%
group_by(Date,Species)%>%
mutate(Date2 = as.Date(Date,format="%d-%m-%Y"))%>%
summarise_all(funs(sum(!is.na(.)),mean,sd),na.rm=TRUE)%>%
select(1,2,3,52:152)%>%
mutate(across(where(is.numeric), round, 2))%>%
rename(replicates = "Tot_lipids_sum")%>%
unite("Tot_lipids","Tot_lipids_mean" : "Tot_lipids_stdev_mean",sep= "±",na.rm = TRUE, remove = T)%>%
unite("C14:0",starts_with("C14:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("iso-15:0",starts_with("iso-15:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("anteiso-15:0",starts_with("anteiso-15:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C14:1n-5",starts_with("C14:1n-5"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C15:0",starts_with("C15:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("iso-16:0",starts_with("iso-16:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C15:1n-5",starts_with("C15:1n-5"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C16:0",starts_with("C16:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("iso-17:0",starts_with("iso-17:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C16:1n-9",starts_with("C16:1n-9"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C16:1n-7",starts_with("C16:1n-7"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C17:0",starts_with("C17:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("9,10D16",starts_with("9,10D16"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C17:1n-7",starts_with("C17:1n-7"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:0",starts_with("C18:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:1n-9trans",starts_with("C18:1n-9trans"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:1n-12",starts_with("C18:1n-12"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:1n-9cis",starts_with("C18:1n-9cis"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:1n-7",starts_with("C18:1n-7"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:1n-6",starts_with("C18:1n-6"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C19:0",starts_with("C19:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:2n-6trans",starts_with("C18:2n-6trans"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("9,10D18",starts_with("9,10D18"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:2n-6cis (LIN)",starts_with("C18:2n-6cis (LIN)"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C20:0",starts_with("C20:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:3n-6",starts_with("C18:3n-6"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C20:1n-9",starts_with("C20:1n-9"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:3n-3 (ALA)",starts_with("C18:3n-3 (ALA)"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C21:0",starts_with("C21:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C18:4n-3",starts_with("C18:4n-3"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C20:2n-6",starts_with("C20:2n-6"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C22:0",starts_with("C22:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C20:3n-6",starts_with("C20:3n-6"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C22:1n-9",starts_with("C22:1n-9"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C20:3n-3",starts_with("C20:3n-3"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C20:4n-6",starts_with("C20:4n-6"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C23:0",starts_with("C23:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C20:4n-3",starts_with("C20:4n-3"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C22:2n-6",starts_with("C22:2n-6"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C24:0",starts_with("C24:0"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C20:5n-3",starts_with("C20:5n-3"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C24:1n-9",starts_with("C24:1n-9"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C22:3n-3",starts_with("C22:3n-3"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C22:4n-6",starts_with("C22:4n-6"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C22:5n-3",starts_with("C22:5n-3"),sep= "±",na.rm = TRUE, remove = T)%>%
unite("C22:6n-3",starts_with("C22:6n-3"),sep= "±",na.rm = TRUE, remove = T)%>%
select(-Type_mean,-Type_sd,-Tot_lipids_sd,-Tot_lipids_stdev_sd)
library(tidyverse)
library(readxl)
library(easyCODA)
library(ggdendro)
FA.dat <- read_excel("C:/Users/Erwin/OneDrive/Manuscript Erwin Kers/R script + data/Manuscript-1.0/Data/FA data.xlsx", skip=1)
# Selection of data
# selecting only % for the 3 species
CA.1 <- filter(FA.dat, Type=="%", Species == "Eudiaptomus" |Species == "Cyclops" |Species == "POM" & Depth == "0-10") %>%
filter(Date != as.Date("2020-10-27"))
# Selecting only FA to keep in analysis + species,date, vial to make column
CA.1 <- CA.1[c(1,3,5,12:57)]
#remove species & date column + FA with many 0's (9,10D16 and C20:1n-9, whch have too many zeros, also C19:0internalstandard)
ER <- CA.1[,-c(16, 24, 30)]
# aggregate table by group and date FA
CA.1 <- ER %>%
group_by(Species, Date) %>%
summarise_at(vars(4:44), list(mean = mean))
################### fixing dates
dates <- CA.1$Date
table(dates)
dates.num <- as.numeric(as.factor(dates))
table(dates.num)
dates.lev <- factor(as.factor(dates), levels=c("2020-11-24", "2021-01-15", "2021-02-05","2021-03-18", "2021-04-19", "2021-05-04", "2021-05-19", "2021-06-08" ))
table(dates.lev)
dates.num <- as.numeric(dates.lev)
table(dates.num)
####################
#make a value for numbers of vial (removing "EK")
num.1 <- str_sub(CA.1$Date, 3, str_length(CA.1$Date)-0)
species <- (CA.1$Species)
#  make species as numbers instead of characters
species.num <- as.numeric(as.factor(CA.1$Species))
# add first letter of Species with number of vial together
case.label <- paste(substr(CA.1$Species,1,1), num.1, sep="")
# set case.label value as rownames
CA.1<- CA.1[,-c(1,2)]
fa.m <- CA.1
rownames(fa.m) <- case.label
####################################################### chi square distance
library(analogue)
# calculations of chi-square distances for abundances of species a,b,c,d,e
rowpro <- fa.m/apply(fa.m,1,sum)
avepro<-apply(fa.m,2,sum)/sum(fa.m)
chid <-dist(as.matrix(rowpro)%*%diag(1/sqrt(avepro)) ) # calculate chi-square distances
chid
chidata <- as.matrix(chid)
# using package same results
# how to change 1,2,3 etc to row names?
distance(fa.m, method = "chi.distance", weights = NULL,
R = F, dist = T, double.zero = T)
#the agglomeration method to be used. This should be (an unambiguous abbreviation of) one of "ward.D", "ward.D2", "single", "complete", "average" (= UPGMA), "mcquitty" (= WPGMA), "median" (= WPGMC) or "centroid" (= UPGMC).
#which method to use?
Chi2_distance <-
distance(fa.m, method = "chi.distance", weights = NULL,
R = F, dist = T, double.zero = T)
Chi2_distance
dend <- hclust(Chi2_distance, method = "ward.D")
as.dendrogram(dend)
plot(dend, type = "rectangle", ylab = "Height")
#with ggplot
#ggdendrogram(dend)
list(case.label)
########## for loop to select only POM compared to Cyclops and eudiaptomus for the same date
as.matrix(chid)[17,1]
FAd<-matrix(0,8,2)
for(j in 1:2){
for (i in 1:8) {
FAd[i,j]<-as.matrix(chid)[(i+16),((j-1)*8+i)]
print(as.matrix(chid)[(i+16),((j-1)*8+i)])
}
}
chi2d<-as.data.frame(FAd)
names(chi2d) <- c("Cyclops", "Eudiaptomus")
chi2d$date <- c("2020-11-24", "2021-01-15", "2021-02-05","2021-03-18", "2021-04-19", "2021-05-04", "2021-05-19", "2021-06-08" )
########## for loop to select only POM compared to Cyclops and eudiaptomus for the next date
as.matrix(chid)[17,1]
FAd<-matrix(0,8,2)
for(j in 1:2){
for (i in 1:8) {
FAd[i,j]<-as.matrix(chid)[(i+15),((j-1)*8+i)]
print(as.matrix(chid)[(i+15),((j-1)*8+i)])
}
}
# chi square distance from mean POM to mean Cyclops and scutifer per date
# POM comapred to next date for zooplankton (1 month delay)
chi2d.delay<-as.data.frame(FAd)
names(chi2d) <- c("Cyclops", "Eudiaptomus")
row.names(chi2d) <- c("2020-11-24", "2021-01-15", "2021-02-05","2021-03-18", "2021-04-19", "2021-05-04", "2021-05-19", "2021-06-08" )
#### saving chi2 to excel file
write_xlsx(chi2d,"C:/Users/Erwin/OneDrive/UIT/Data/chi distance/chi2.xlsx")
library(ggbreak)
plot_grid(condbar,lhand,barnut2,ncol=1,align = "v")
library(ggbreak)
plot_grid(condbar,lhand,barnut2,chlbar,ncol=1,align = "v")
remove.packages(“xfun”)
install.packages("xfun")
install.packages(c("ade4", "aplot", "backports", "bayesplot", "BH", "bitops", "blob", "brew", "brio", "broom", "callr", "car", "carData", "caTools", "checkmate", "classInt", "cli", "clipr", "colorspace", "colourpicker", "commonmark", "conquer", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "dendextend", "desc", "devtools", "diffobj", "digest", "dplyr", "DT", "dtplyr", "e1071", "ellipse", "evaluate", "fansi", "farver", "forcats", "generics", "gert", "ggbreak", "ggfun", "ggplot2", "googlesheets4", "gplots", "gt", "gtools", "haven", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "inline", "isoband", "jpeg", "jsonlite", "knitr", "later", "latticeExtra", "leaflet", "lme4", "loo", "lubridate", "magrittr", "maptools", "MatrixModels", "matrixStats", "memoise", "mgcv", "mime", "mockery", "modelr", "MuMIn", "nlme", "nloptr", "oce", "ocedata", "openssl", "openxlsx", "packrat", "patchwork", "pbkrtest", "permute", "pillar", "pkgbuild", "pkgload", "plotrix", "plyr", "polynom", "processx", "promises", "proxy", "ps", "quantreg", "R6", "raster", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "readr", "readxl", "remotes", "reprex", "rio", "rlang", "roxygen2", "rprojroot", "rsconnect", "rstan", "rstanarm", "rstantools", "rstudioapi", "rvest", "s2", "sass", "scales", "sessioninfo", "sf", "shiny", "shinyjs", "shinystan", "shinythemes", "sp", "SparseM", "statmod", "stringi", "stringr", "testthat", "tibble", "tidyr", "tidyverse", "tinytex", "units", "usethis", "utf8", "uuid", "V8", "vctrs", "vegan", "viridis", "viridisLite", "waldo", "withr", "wk", "xfun", "xml2", "yaml", "yulab.utils", "zip", "zoo"))
install.packages(c("ade4", "aplot", "backports", "bayesplot", "BH", "bitops", "blob", "brew", "brio", "broom", "callr", "car", "carData", "caTools", "checkmate", "classInt", "cli", "clipr", "colorspace", "colourpicker", "commonmark", "conquer", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "dendextend", "desc", "devtools", "diffobj", "digest", "dplyr", "DT", "dtplyr", "e1071", "ellipse", "evaluate", "fansi", "farver", "forcats", "generics", "gert", "ggbreak", "ggfun", "ggplot2", "googlesheets4", "gplots", "gt", "gtools", "haven", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "inline", "isoband", "jpeg", "jsonlite", "knitr", "later", "latticeExtra", "leaflet", "lme4", "loo", "lubridate", "magrittr", "maptools", "MatrixModels", "matrixStats", "memoise", "mgcv", "mime", "mockery", "modelr", "MuMIn", "nlme", "nloptr", "oce", "ocedata", "openssl", "openxlsx", "packrat", "patchwork", "pbkrtest", "permute", "pillar", "pkgbuild", "pkgload", "plotrix", "plyr", "polynom", "processx", "promises", "proxy", "ps", "quantreg", "R6", "raster", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "readr", "readxl", "remotes", "reprex", "rio", "rlang", "roxygen2", "rprojroot", "rsconnect", "rstan", "rstanarm", "rstantools", "rstudioapi", "rvest", "s2", "sass", "scales", "sessioninfo", "sf", "shiny", "shinyjs", "shinystan", "shinythemes", "sp", "SparseM", "statmod", "stringi", "stringr", "testthat", "tibble", "tidyr", "tidyverse", "tinytex", "units", "usethis", "utf8", "uuid", "V8", "vctrs", "vegan", "viridis", "viridisLite", "waldo", "withr", "wk", "xfun", "xml2", "yaml", "yulab.utils", "zip", "zoo"))
install.packages(c("ade4", "aplot", "backports", "bayesplot", "BH", "bitops", "blob", "brew", "brio", "broom", "callr", "car", "carData", "caTools", "checkmate", "classInt", "cli", "clipr", "colorspace", "colourpicker", "commonmark", "conquer", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "dendextend", "desc", "devtools", "diffobj", "digest", "dplyr", "DT", "dtplyr", "e1071", "ellipse", "evaluate", "fansi", "farver", "forcats", "generics", "gert", "ggbreak", "ggfun", "ggplot2", "googlesheets4", "gplots", "gt", "gtools", "haven", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "inline", "isoband", "jpeg", "jsonlite", "knitr", "later", "latticeExtra", "leaflet", "lme4", "loo", "lubridate", "magrittr", "maptools", "MatrixModels", "matrixStats", "memoise", "mgcv", "mime", "mockery", "modelr", "MuMIn", "nlme", "nloptr", "oce", "ocedata", "openssl", "openxlsx", "packrat", "patchwork", "pbkrtest", "permute", "pillar", "pkgbuild", "pkgload", "plotrix", "plyr", "polynom", "processx", "promises", "proxy", "ps", "quantreg", "R6", "raster", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "readr", "readxl", "remotes", "reprex", "rio", "rlang", "roxygen2", "rprojroot", "rsconnect", "rstan", "rstanarm", "rstantools", "rstudioapi", "rvest", "s2", "sass", "scales", "sessioninfo", "sf", "shiny", "shinyjs", "shinystan", "shinythemes", "sp", "SparseM", "statmod", "stringi", "stringr", "testthat", "tibble", "tidyr", "tidyverse", "tinytex", "units", "usethis", "utf8", "uuid", "V8", "vctrs", "vegan", "viridis", "viridisLite", "waldo", "withr", "wk", "xfun", "xml2", "yaml", "yulab.utils", "zip", "zoo"))
install.packages(c("ade4", "aplot", "backports", "bayesplot", "BH", "bitops", "blob", "brew", "brio", "broom", "callr", "car", "carData", "caTools", "checkmate", "classInt", "cli", "clipr", "colorspace", "colourpicker", "commonmark", "conquer", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "dendextend", "desc", "devtools", "diffobj", "digest", "dplyr", "DT", "dtplyr", "e1071", "ellipse", "evaluate", "fansi", "farver", "forcats", "generics", "gert", "ggbreak", "ggfun", "ggplot2", "googlesheets4", "gplots", "gt", "gtools", "haven", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "inline", "isoband", "jpeg", "jsonlite", "knitr", "later", "latticeExtra", "leaflet", "lme4", "loo", "lubridate", "magrittr", "maptools", "MatrixModels", "matrixStats", "memoise", "mgcv", "mime", "mockery", "modelr", "MuMIn", "nlme", "nloptr", "oce", "ocedata", "openssl", "openxlsx", "packrat", "patchwork", "pbkrtest", "permute", "pillar", "pkgbuild", "pkgload", "plotrix", "plyr", "polynom", "processx", "promises", "proxy", "ps", "quantreg", "R6", "raster", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "readr", "readxl", "remotes", "reprex", "rio", "rlang", "roxygen2", "rprojroot", "rsconnect", "rstan", "rstanarm", "rstantools", "rstudioapi", "rvest", "s2", "sass", "scales", "sessioninfo", "sf", "shiny", "shinyjs", "shinystan", "shinythemes", "sp", "SparseM", "statmod", "stringi", "stringr", "testthat", "tibble", "tidyr", "tidyverse", "tinytex", "units", "usethis", "utf8", "uuid", "V8", "vctrs", "vegan", "viridis", "viridisLite", "waldo", "withr", "wk", "xfun", "xml2", "yaml", "yulab.utils", "zip", "zoo"))
install.packages(c("ade4", "aplot", "backports", "bayesplot", "BH", "bitops", "blob", "brew", "brio", "broom", "callr", "car", "carData", "caTools", "checkmate", "classInt", "cli", "clipr", "colorspace", "colourpicker", "commonmark", "conquer", "corrplot", "cpp11", "crayon", "credentials", "crosstalk", "curl", "data.table", "DBI", "dbplyr", "dendextend", "desc", "devtools", "diffobj", "digest", "dplyr", "DT", "dtplyr", "e1071", "ellipse", "evaluate", "fansi", "farver", "forcats", "generics", "gert", "ggbreak", "ggfun", "ggplot2", "googlesheets4", "gplots", "gt", "gtools", "haven", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "inline", "isoband", "jpeg", "jsonlite", "knitr", "later", "latticeExtra", "leaflet", "lme4", "loo", "lubridate", "magrittr", "maptools", "MatrixModels", "matrixStats", "memoise", "mgcv", "mime", "mockery", "modelr", "MuMIn", "nlme", "nloptr", "oce", "ocedata", "openssl", "openxlsx", "packrat", "patchwork", "pbkrtest", "permute", "pillar", "pkgbuild", "pkgload", "plotrix", "plyr", "polynom", "processx", "promises", "proxy", "ps", "quantreg", "R6", "raster", "RColorBrewer", "Rcpp", "RcppArmadillo", "RcppEigen", "RcppParallel", "readr", "readxl", "remotes", "reprex", "rio", "rlang", "roxygen2", "rprojroot", "rsconnect", "rstan", "rstanarm", "rstantools", "rstudioapi", "rvest", "s2", "sass", "scales", "sessioninfo", "sf", "shiny", "shinyjs", "shinystan", "shinythemes", "sp", "SparseM", "statmod", "stringi", "stringr", "testthat", "tibble", "tidyr", "tidyverse", "tinytex", "units", "usethis", "utf8", "uuid", "V8", "vctrs", "vegan", "viridis", "viridisLite", "waldo", "withr", "wk", "xfun", "xml2", "yaml", "yulab.utils", "zip", "zoo"))
